name: Publish Unity SDK from Public Repo

env:
  NPM_REGISTRY: https://repo.embrace.io/repository/unity/
  AWS_BUCKET: 's3://embrace-production-downloads'
  AWS_CLOUDFRONT_ID: "E153CHTELJDE1S" # repo.embrace.io
  AWS_DEFAULT_REGION: "${{ vars.AWS_DEFAULT_REGION }}"
  PACKAGE_REPO_PATH: 'embrace-unity-sdk-internal'
  PACKAGE_DIRECTORY: 'io.embrace.sdk'
  PACKAGE_JSON_PATH: 'io.embrace.sdk/package.json'
  PACKAGE_CHANGELOG_PATH: 'io.embrace.sdk/CHANGELOG.md'
  EDM_DEPENDENCIES_PATH: 'io.embrace.sdk/Editor/EmbraceSDKDependencies.xml'
  DOCS_REPO_PATH: 'embrace-docs'
  DOCS_CHANGELOG_PATH: 'docs/unity/changelog.md'
  DOCS_CONFIG_PATH: 'embrace.json'
  PROJECT_PATH: 'UnityProjects/2021'
  UNITY_EDITOR_PATH: '/Applications/Unity/Hub/Editor/2021.3.16f1/Unity.app/Contents/MacOS/Unity'

on:
  workflow_dispatch:
    inputs:
      npm_push_mode:
        type: choice
        options:
          - none
          - dry-run
          - publish
        required: true
        default: dry-run

      aws_push_mode:
        type: choice
        options:
          - none
          - dry-run
          - publish
        required: true
        default: dry-run

      tags_push_mode:
        type: choice
        options:
          - none
          - dry-run
          - publish
        required: true
        default: dry-run
  workflow_call:
    inputs:
      npm_push_mode:
        type: string
        required: true
        default: dry-run
      aws_push_mode:
        type: string
        required: true
        default: dry-run
      tags_push_mode:
        type: string
        required: true
        default: dry-run

permissions:
  contents: write
  id-token: write

jobs:
  generate_iOS_xcframeworks:
    name: Generate Unity iOS XCFramework
    runs-on: macos-latest
    steps:
      - name: Checkout internal SDK
        uses: actions/checkout@v4
        with:
          repository: embrace-io/embrace-unity-sdk-internal
          submodules: recursive
          lfs: true
      - name: Install xcpretty
        run: gem install xcpretty
      - name: Install xcodegen
        run: brew install xcodegen
      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      - name: Update iOS to Latest Supported
        run: |
          cd Embrace\ Unity\ iOS\ Interface/
          ./update_iOS_to_latest.sh 6.6.0
      - name: Generate iOS XCFrameworks
        run: |
          cd Embrace\ Unity\ iOS\ Interface/
          ./build_xcframework.sh
      - name: Upload XCFrameworks
        uses: actions/upload-artifact@v4
        with:
          name: EmbraceUnityXCFramework
          path: Embrace\ Unity\ iOS\ Interface/build/EmbraceUnityiOS.xcframework
          if-no-files-found: error
          retention-days: 1
  publish:
    name: Publish Embrace Unity SDK
    runs-on: ubuntu-latest
    needs: 
      - generate_iOS_xcframeworks
    strategy:
      matrix:
        os: [
          { host: ubuntu-latest, image: ubuntu }
        ]
        buildTarget: [
          { unity: Android, image: android },
        ]
        project: [
          { displayName: Unity 2021, unityVersion: 2021.3.37f1, path: UnityProjects/2021 },
        ]
    steps:
      - name: Clear Space
        uses: embrace-io/free-disk-space@main
        with:
          haskell: true
      - name: Checkout internal SDK
        uses: actions/checkout@v4
        with:
          repository: embrace-io/embrace-unity-sdk-internal
          submodules: recursive
          token: ${{ secrets.GH_EMBRACE_UNITY_SDK_TOKEN }} 
          lfs: true
      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      - name: Fetch Embrace iOS SDK XCFrameworks
        run: | 
          gh release download 6.6.0 --repo embrace-io/embrace-apple-sdk --pattern 'embrace_*.zip' --dir io.embrace.sdk/iOS
          unzip -o io.embrace.sdk/iOS/embrace_*.zip -d io.embrace.sdk/iOS
          rm io.embrace.sdk/iOS/embrace_*.zip
      - name: Fetch Unity iOS SDK XCFramework
        uses: actions/download-artifact@v4
        with:
          name: EmbraceUnityXCFramework
          path: io.embrace.sdk/iOS/xcframeworks/EmbraceUnityiOS.xcframework/
      - name: Enforce Publish Public SDK version
        run: |
          ./enforce_publish_sdk.sh
      # Parses the SDK package version from the package.json file via the jq utility
      - name: Get Package Version
        run: |
          export PACKAGE_VERSION=$(cat ./${{ env.PACKAGE_JSON_PATH }} | jq -r .version)
          echo "${PACKAGE_VERSION}"
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
      # - name: Tag commit
      #   if: ${{ inputs.tags_push_mode != 'none'}}
      #   run: |
      #     git config --global user.name "embrace-ci"
      #     git config --global user.email "embrace-ci@users.noreply.github.com"
      #     git tag -a ${{ env.PACKAGE_VERSION}} -m "${{ env.PACKAGE_VERSION }}"
      - name: Push Tag
        if: ${{ inputs.tags_push_mode == 'publish' }}
        run: |
          git push --tags
      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: ${{ env.PACKAGE_REPO_PATH }}/${{ matrix.project.path }}Library
          key: Library-${{ matrix.project.path }}-${{ matrix.os.host }}-${{ matrix.buildTarget.image }}
      - name: ls
        run: ls
      - name: Export .unitypackage
        uses: game-ci/unity-builder@v4
        id: exportUnityPackage
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          projectPath: ${{ matrix.project.path}}
          unityVersion: ${{ matrix.project.unityVersion }}
          targetPlatform: ${{ matrix.buildTarget.unity }}
          customImage: 'unityci/editor:${{ matrix.os.image }}-${{ matrix.project.unityVersion }}-${{ matrix.buildTarget.image }}-3.0.1'
          customParameters: -buildTarget ${{ matrix.buildTarget.unity }}
          versioning: None
          buildMethod: EmbraceSDK.CIPublishTool.ExportUnityPackage
      - uses: actions/upload-artifact@v4
        with:
          name: unitypackage.zip
          path: './${{ matrix.project.path }}/EmbraceSDK_${{ env.PACKAGE_VERSION }}.unitypackage'
          if-no-files-found: error
          retention-days: 1 #TODO: Figure out what to do. The resulting SDK package is now *huge*
      - name: Set Up NPM
        if: ${{ inputs.npm_push_mode != 'none' }}
        uses: actions/setup-node@v4
        with:
          registry-url: ${{ env.NPM_REGISTRY }}
          always-auth: true
      - name: Publish NPM Package (dry-run)
        if: ${{ inputs.npm_push_mode == 'dry-run' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NEXUS_NPM_TOKEN }} # By default, the setup-node action creates an .npmrc which expects the auth token in NODE_AUTH_TOKEN
        run: |
          cd ./${{ env.PACKAGE_DIRECTORY }}
          npm publish --dry-run --registry=${{ env.NPM_REGISTRY }}
      - name: Publish NPM Package
        if: ${{ inputs.npm_push_mode == 'publish' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NEXUS_NPM_TOKEN }} # By default, the setup-node action creates an .npmrc which expects the auth token in NODE_AUTH_TOKEN
        run: |
          cd ./${{ env.PACKAGE_DIRECTORY }}
          npm publish --registry=${{ env.NPM_REGISTRY }}
      - name: Upload NPM Logs
        if: ${{ inputs.npm_push_mode != 'none' }}
        uses: actions/upload-artifact@v4
        with:
          name: npm_logs
          path: '~/.npm/_logs/*.log'
          if-no-files-found: warn

      # See https://github.com/organizations/embrace-io/settings/variables/actions/AWS_ACCOUNT_IDS
      - name: Set AWS identifiers
        run: |
          echo AWS_LOGIN_ROLE=arn:aws:iam::$(echo '${{ vars.AWS_ACCOUNT_IDS }}' | jq .login):role/login-embrace-unity-sdk >> $GITHUB_ENV
          echo AWS_ASSUME_ROLE=arn:aws:iam::$(echo '${{ vars.AWS_ACCOUNT_IDS }}' | jq .production):role/production-embrace-unity-sdk >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_LOGIN_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Assume AWS role
        if: ${{ inputs.aws_push_mode != 'none' }}
        run: |
            pip install --upgrade awscli
            credentials=$(aws sts assume-role --role-arn "${{ env.AWS_ASSUME_ROLE }}" --role-session-name "`echo $GITHUB_REPOSITORY | tr "/" "-"`" --duration-seconds 900)
            echo "AWS_ACCESS_KEY_ID=`echo $credentials | jq -r .Credentials.AccessKeyId`" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=`echo $credentials | jq -r .Credentials.SecretAccessKey`" >> $GITHUB_ENV
            echo "AWS_SESSION_TOKEN=`echo $credentials | jq -r .Credentials.SessionToken`" >> $GITHUB_ENV
      - name: Invalidate CloudFront cache
        if: ${{ inputs.npm_push_mode == 'publish' }}
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ env.AWS_CLOUDFRONT_ID }} --paths '/*'
      - name: Upload to S3 (dry-run)
        if: ${{ inputs.aws_push_mode == 'dry-run' }}
        run: |
          aws s3 cp --acl=public-read ./${{ matrix.project.path}}/EmbraceSDK_${{ env.PACKAGE_VERSION }}.unitypackage ${{ env.AWS_BUCKET }} --dryrun
      - name: Upload to S3
        if: ${{ inputs.aws_push_mode == 'publish' }}
        run: |
          aws s3 cp --acl=public-read ./${{ matrix.project.path}}/EmbraceSDK_${{ env.PACKAGE_VERSION }}.unitypackage ${{ env.AWS_BUCKET }}
      - name: Record SDK Version History
        if: ${{ inputs.tags_push_mode == 'publish' }}
        run: |
          curl -X POST ${{ vars.SDK_VERSION_URL }}/unity/version/ -H 'X-Embrace-CI: ${{ secrets.SDK_VERSION_TOKEN }}' -H 'Content-Type: application/json' -d '{"version": "${{ env.PACKAGE_VERSION }}"}'
