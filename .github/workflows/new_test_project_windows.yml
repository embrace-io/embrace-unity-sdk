name: Test SDK - Windows

on:
  workflow_dispatch:
  workflow_call:
  push:
    branches:
      # - embr-2481-github-actions-update
      - non-existent-branch

jobs:
  ################################################################################
  #                                                                              #
  #                              Windows Tests                                   #
  #                                                                              #
  ################################################################################
  # We found that installing Unity directly onto GitHub's hosted runners was actually faster than pulling a Windows docker image,
  # so this job does that rather than just adding a new os to the matrix in the Docker job above. These tests run in hosted runners,
  # and each run uses a separate license activation. This means we can only perform one test run at a time. To reduce the amount of time,
  # spent waiting for Unity to install, this job runs iOS and Android tests in a single job rather than as separate jobs defined in a
  # matrix as the jobs above do. 
  #
  # This all means that this job is very slow, so we use a concurrency group to guarantee that there is only ever one instance of it running.
  testSDKProjectOnWin:
    name: ${{ matrix.testProject.displayName }} tests (Windows)
    concurrency:
      group: 'Unity-Windows-Tests-${{ matrix.testProject.displayName }}'
      cancel-in-progress: true
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        # Add new Unity versions/projects here
        # displayName: used in the GitHub actions UI and artifact names
        # unityVersion: the full version number of the Unity version to test
        # unityChangeset: the changeset value of the Unity version (found in release notes or ProjectVersion.txt)
        # path: the path of the Unity project to test. Make sure to include the trailing '\'
        testProject: [
          { displayName: '2023', unityVersion: 2023.1.11f1, unityChangeset: fbf46ad88f3d, path: UnityProjects\2023\ },
          { displayName: '2022', unityVersion: 2022.3.8f1, unityChangeset: b5eafc012955, path: UnityProjects\2022\ },
          { displayName: '2021', unityVersion: 2021.3.16f1, unityChangeset: 4016570cf34f, path: UnityProjects\2021\ },
          { displayName: '2020', unityVersion: 2020.3.35f1, unityChangeset: 18e4db7a9996, path: UnityProjects\2020\ },
          { displayName: '2019', unityVersion: 2019.4.39f1, unityChangeset: 78d14dfa024b, path: UnityProjects\2019\ },
          { displayName: 'EDM', unityVersion: 2021.3.16f1, unityChangeset: 4016570cf34f, path: UnityProjects\EDM\ },
        ]

    runs-on: windows-2019
    timeout-minutes: 65
    env:
      CODE_COVERAGE_PATH: ${{ github.workspace }}/${{ matrix.testProject.path }}CI_CodeCoverage
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
          clean: true

      - name: Install Unity Hub
        shell: cmd
        run: |
          choco install unity-hub --no-progress -y

      - name: Install Unity Editor
        shell: cmd
        run: |
          "C:/Program Files/Unity Hub/Unity Hub.exe" -- --headless install --version ${{ matrix.testProject.unityVersion }} --changeset ${{ matrix.testProject.unityChangeset }}

      - name: Install Android Build module
        shell: cmd
        run: |
          "C:/Program Files/Unity Hub/Unity Hub.exe" -- --headless install-modules --version ${{ matrix.testProject.unityVersion }} --module android --childModules

      - name: Activate Unity License
        id: activate
        timeout-minutes: 5
        shell: cmd
        run: |
          "C:Program Files/Unity/Hub/Editor/${{ matrix.testProject.unityVersion }}/Editor/Unity.exe" -quit -batchmode -nographics -logFile - -serial ${{ secrets.UNITY_SERIAL }} -username ${{ secrets.UNITY_EMAIL }} -password ${{ secrets.UNITY_PASSWORD }}

      - name: Run Play Mode Tests (Android)
        env:
          UNITY_TEST_MODE: 'playmode'
          UNITY_BUILD_TARGET: 'Android'
        shell: bash
        run: |
          ./run_tests.sh ${{ matrix.testProject.displayName }}

      - name: Run Edit Mode Tests (Android)
        env:
          UNITY_TEST_MODE: 'editmode'
          UNITY_BUILD_TARGET: 'Android'
        shell: bash
        run: |
          ./run_tests.sh ${{ matrix.testProject.displayName }}

      - name: Upload Test Results Artifacts
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: Windows test results for ${{ matrix.testProject.displayName }}
          path: |
            ${{ github.workspace }}\${{ matrix.testProject.path }}android-editmoderesults.xml
            ${{ github.workspace }}\${{ matrix.testProject.path }}android-playmoderesults.xml
          retention-days: 14

      - name: Clean Repo
        run: git checkout . && git clean -fd

      - name: Install iOS Build module
        shell: cmd
        run: |
          "C:/Program Files/Unity Hub/Unity Hub.exe" -- --headless install-modules --version ${{ matrix.testProject.unityVersion }} --module ios --childModules

      - name: Run Play Mode Tests (iOS)
        env:
          UNITY_TEST_MODE: 'playmode'
          UNITY_BUILD_TARGET: 'iOS'
        shell: bash
        run: |
          ./run_tests.sh ${{ matrix.testProject.displayName }}

      - name: Run Edit Mode Tests (iOS)
        env:
          UNITY_TEST_MODE: 'editmode'
          UNITY_BUILD_TARGET: 'iOS'
        shell: bash
        run: |
          ./run_tests.sh ${{ matrix.testProject.displayName }}

      - name: Upload Test Results Artifacts
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: Windows test results for ${{ matrix.testProject.displayName }}
          path: |
            ${{ github.workspace }}\${{ matrix.testProject.path }}ios-editmoderesults.xml
            ${{ github.workspace }}\${{ matrix.testProject.path }}ios-playmoderesults.xml
          retention-days: 14

      - name: Return Unity License
        if: always()
        timeout-minutes: 5
        shell: cmd
        run: |
          "C:Program Files/Unity/Hub/Editor/${{ matrix.testProject.unityVersion }}/Editor/Unity.exe" -quit -batchmode -nographics -logFile - -returnlicense -username ${{ secrets.UNITY_EMAIL }} -password ${{ secrets.UNITY_PASSWORD }}
